<?php

/**
 * Implements hook_menu().
 */
function campaign_counter_menu() {
  $items['campaign_counter/ajax/%/%/%'] = array(
    'page callback' => 'campaign_counter_json',
    'page arguments' => array(2, 3, 4),
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('access campaign counter json'),
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function campaign_counter_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_permission().
 */
function campaign_counter_permission() {
  return array(
    'view campaign counters' => array(
      'title' => t('View Campaign Counters'),
      'description' => t('Access views of campaign hit counters.'),
    ),
    'access campaign counter json' => array(
      'title' => t('Access Campaign Counter JSON'),
      'description' => t('Access campaign counter data as JSON'),
    ),
  );
}

/**
 * JSON service to query campaign counters.
 */
function campaign_counter_json($method, $campaign, $type) {
  $data = new stdClass();
  switch ($method) {
    case 'unique':
      $result = db_select('campaign_counter', 'c')
        ->fields('c', array('id'))
        ->condition('campaign', $campaign)
        ->condition('type', $type)
        ->execute()
        ->rowCount();
      $data->result = $result;
      break;
    default:
      $error = new stdClass();
      $error->message = t('Unkown method');
      $data->errors[] = $error;
  }
  return $data;
}

/**
 * Increment a campaign counter.
 */
function campaign_counter_increment($campaign, $type, $ref, $count = 1) {
  db_merge('campaign_counter')
    ->key(array(
      'campaign' => $campaign,
      'type' => $type,
      'ref' => $ref,
    ))
    ->fields(array(
      'updated' => REQUEST_TIME,
      'hits' => $count,
    ))
    ->expression('hits', 'hits + :inc', array(':inc' => $count))
    ->execute();
}

/**
 * Get the hit count for a specific counter.
 */
function campaign_counter_get_hits($campaign, $type, $ref) {
  return db_select('campaign_counter', 'c')
    ->fields('c', array('hits'))
    ->condition('campaign', $campaign)
    ->condition('type', $type)
    ->condition('ref', $ref)
    ->execute()
    ->fetchField();
}

/**
 * Implements hook_form_campaign_context_rename_alter().
 */
function campaign_counter_form_campaign_context_rename_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'campaign_counter_rename_submit';
}

/**
 * Move over old counters to the new namespace when a capmaign is renamed.
 */
function campaign_counter_rename_submit($form, &$form_state) {
  $namespace = $form_state['values']['name'];
  $old_namespace = $form_state['values']['original_name'];

  db_update('campaign_counter')
    ->fields(array(
      'campaign' => $namespace
    ))
    ->condition('campaign', $old_namespace)
    ->execute();
}
